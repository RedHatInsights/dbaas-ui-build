{"version":3,"file":"js/HomePage.1676620227188.782a90012d2ffce269a5.js","mappings":"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","sources":["webpack:///./src/Routes/HomePage/consts.js","webpack:///./src/Routes/HomePage/index.js"],"sourcesContent":["export const RHOpenShiftServiceName = 'Red Hat OpenShift Service';\n\nexport const ClusterTypeAndNameMapping = {\n  ARO: 'Azure Red Hat OpenShift',\n  OSD: 'Openshift Dedicated',\n  MOA: 'Red Hat OpenShift Service on AWS',\n};\n\nexport const RHODAClusterAddonMode = {\n  Detecting: 'Detecting',\n  Install: 'Install',\n  Upgrade: 'Upgrade',\n  Create: 'Create',\n};\n\nexport const CREATE_CLUSTER_HREF = `${document.baseURI}openshift/create `;\nexport const UPGRADE_CLUSTER_HREF = `${document.baseURI}openshift/details/s/{subscriptionID}#machinePools`;\nexport const INSTALL_ADDON_HREF = `${document.baseURI}openshift/details/s/{subscriptionID}#addOns`;\nexport const RHODA_ADDON_ID = 'dbaas-operator';\nexport const ARO_QUICK_START_GUIDE_HREF =\n  'https://access.redhat.com/documentation/en-us/red_hat_openshift_database_access/1/html-single/quick_start_guide/index#manual-installation-of-openshift-database-access-on-azure-red-hat-openshift';\n\nexport const textContent = {\n  cancelClusterAction: 'Cancel',\n  createClusterAction: 'Create new cluster',\n  createClusterContent:\n    'Clicking Create new cluster redirects you to the OpenShift Cluster Manager where you can create a cluster, and install the OpenShift Database Access add-on.',\n  createClusterDescription:\n    'We didn’t detect any clusters. The minimal requirement for installing OpenShift Database Access is running OpenShift Container Platform (OCP) 4.10 or higher.',\n  createClusterLabel:\n    'Create a new cluster with the installation prerequisites',\n  detectingClustersTitle: 'Detecting clusters…',\n  installingClustersTitle: 'Installing add-on…',\n  heroCallToActionButton: 'Learn more about OpenShift Database Access',\n  heroDescription:\n    'Accelerate your data science. OpenShift Database Access is a managed cloud service for data scientists and developers of intelligent applications. Within a fully supported sandbox, it allows businesses to rapidly develop, train, and test artificial intelligence (AI) and machine learning (ML) models using Red Hat and partner technology.',\n  heroTagline: 'Add-on service for managed OpenShift',\n  heroTitle: 'Get started with Red Hat OpenShift Database Access',\n  heroTryItButton: 'Try it in the sandbox',\n  heroViewDemo: 'View the demo',\n  installButton: 'Install it on a cluster',\n  installClusterAction: 'Install',\n  installClusterContent:\n    'The OpenShift Database Access add-on will be installed on the selected cluster. You can remove it later by accessing the Add-ons menu in the OpenShift Cluster Manager(OCM)',\n  installClusterDescription:\n    'We detected clusters that meet the pre-requisites for installing OpenShift Database Access.',\n  installClusterSelectTitlePopoverContent:\n    'A list of clusters that have a minimum required version of OpenShift 4.10 to be compatible with the OpenShift Database Access add-on.',\n  installClusterTitle: 'Install OpenShift Database Access on your cluster',\n  createClusterTitle: 'Clusters were not detected',\n  selectClusterLabel: 'Existing clusters:',\n  upgradeAction: 'Upgrade',\n  upgradeClusterCPUs: 'At least 8 CPUs per node',\n  upgradeClusterDescription:\n    'We detected your clusters, but none meet the installation prerequisites. To install OpenShift Database Access, you can upgrade an existing cluster, or create a new one that meets the prerequisites.',\n  upgradeClusterMemory: 'At least 32 GB of memory per node',\n  upgradeClusterNodes: 'At least 2 worker nodes',\n  upgradeClusterPrerequisites:\n    'For this cluster to meet installation prerequisites, it must have:',\n  upgradeClusterSelectDescription:\n    \"We'll automatically install OpenShift Database Access after the upgrade.\",\n  upgradeClusterSelectLabel: 'Select a cluster to upgrade',\n  videoSectionInThisVideo:\n    'In this video you’ll learn how to quickly build and deploy artificial intelligence and machine learning models using Red Hat and partner technology tools.',\n  videoSectionTitle: 'Demo of Red Hat OpenShift Database Access',\n  AROClusterAlertContent:\n    'Installing OpenShift Database Access on an Azure Red Hat OpenShift (ARO) cluster requires a different process. See the Red Hat OpenShift Database Access Quick Start Guide for more details.',\n};\n","/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport semver from 'semver';\nimport { useDispatch } from 'react-redux';\nimport {\n  addNotification,\n  clearNotifications,\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useCallback, useEffect } from 'react';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport {\n  Button,\n  Title,\n  Text,\n  TextContent,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Modal,\n  Flex,\n  Bullseye,\n  Spinner,\n  List,\n  ListItem,\n  Radio,\n  Select,\n  SelectOption,\n  Alert,\n  Popover,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { HelpIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport {\n  RHODAClusterAddonMode,\n  CREATE_CLUSTER_HREF,\n  UPGRADE_CLUSTER_HREF,\n  INSTALL_ADDON_HREF,\n  RHODA_ADDON_ID,\n  ARO_QUICK_START_GUIDE_HREF,\n  textContent,\n  ClusterTypeAndNameMapping,\n  RHOpenShiftServiceName,\n} from './consts';\n\nimport './home-page.scss';\n\nconst ClusterSelect = ({\n  clusters,\n  handleSelectCluster,\n  selectedCluster,\n  isDisabled,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const getClusterTypeAndName = (cluster) => {\n    const clusterType =\n      cluster.plan?.type !== undefined\n        ? ClusterTypeAndNameMapping[cluster.plan?.type]\n        : `${RHOpenShiftServiceName} on ${cluster.cloud_provider_id}`;\n    return `${cluster.display_name} (${clusterType})`;\n  };\n  return (\n    <Select\n      maxHeight={200}\n      isDisabled={isDisabled}\n      data-testid=\"select-RHODA-cluster\"\n      onSelect={() => setIsOpen(false)}\n      selections={\n        selectedCluster\n          ? {\n              toString: () => getClusterTypeAndName(selectedCluster),\n              compareTo: (selectOption) =>\n                selectOption === selectedCluster.cluster_id,\n            }\n          : undefined\n      }\n      isOpen={isOpen}\n      menuAppendTo=\"parent\"\n      variant=\"single\"\n      onToggle={(isOpen) => setIsOpen(isOpen)}\n    >\n      {clusters.map((cluster) => (\n        <SelectOption\n          onClick={() => {\n            setIsOpen(false);\n            handleSelectCluster(cluster);\n          }}\n          key={cluster.cluster_id}\n          value={{\n            toString: () => getClusterTypeAndName(cluster),\n            compareTo: (selectOption) => selectOption === cluster.cluster_id,\n          }}\n        />\n      ))}\n    </Select>\n  );\n};\n\nconst InstallClusterModalContent = (props) => {\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <TextContent>\n          <Text>{textContent.installClusterContent}</Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <TextContent>\n          <Text>{textContent.createClusterContent}</Text>\n        </TextContent>\n      </StackItem>\n      <StackItem>\n        <Split style={{ alignItems: 'center' }}>\n          <SplitItem>\n            <TextContent className=\"pf-u-mb-sm\">\n              <Text component=\"p\">{textContent.selectClusterLabel}</Text>\n            </TextContent>\n          </SplitItem>\n          <SplitItem style={{ marginLeft: '5px' }}>\n            <Popover\n              headerContent=\"Clusters\"\n              bodyContent={\n                <div>\n                  <p>{textContent.installClusterSelectTitlePopoverContent}</p>\n                  <br />\n                  <b>Support clusters</b>\n                  <List>\n                    <ListItem>Red Hat OpenShift Service on AWS (ROSA)</ListItem>\n                    <ListItem>OpenShift Dedicated (OSD)</ListItem>\n                    <ListItem>Azure Red Hat OpenShift (ARO)</ListItem>\n                  </List>\n                </div>\n              }\n            >\n              <button\n                type=\"button\"\n                aria-label=\"more info\"\n                onClick={(e) => e.preventDefault()}\n                aria-describedby=\"more-info\"\n                className=\"pf-c-form__group-label-help\"\n              >\n                <HelpIcon noVerticalAlign />\n              </button>\n            </Popover>\n          </SplitItem>\n        </Split>\n        <ClusterSelect {...props} />\n      </StackItem>\n      <StackItem>\n        {props.selectedCluster && props.selectedCluster.plan?.type === 'ARO' && (\n          <Alert\n            variant=\"info\"\n            isInline\n            title=\"You have selected an ARO cluster\"\n            className=\"co-info co-break-word\"\n          >\n            <p>{textContent.AROClusterAlertContent}</p>\n            <Button\n              variant=\"link\"\n              component=\"a\"\n              href={ARO_QUICK_START_GUIDE_HREF}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              isInline\n            >\n              Quick Start Guide\n            </Button>\n          </Alert>\n        )}\n      </StackItem>\n    </Stack>\n  );\n};\n\nconst UpgradeClusterModalContent = ({\n  handleStrategyChange,\n  upgradeStrategy,\n  ...props\n}) => {\n  const upgradeBody = (\n    <TextContent>\n      <Text component=\"small\">\n        {textContent.upgradeClusterSelectDescription}\n      </Text>\n      <ClusterSelect {...props} isDisabled={upgradeStrategy !== 'Upgrade'} />\n      <TextContent>\n        <Text>{textContent.upgradeClusterPrerequisites}</Text>\n        <List>\n          <ListItem>{textContent.upgradeClusterNodes}</ListItem>\n          <ListItem>{textContent.upgradeClusterCPUs}</ListItem>\n          <ListItem>{textContent.upgradeClusterMemory}</ListItem>\n        </List>\n      </TextContent>\n    </TextContent>\n  );\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Radio\n          id=\"upgrade-cluster\"\n          name=\"upgrade-cluster\"\n          data-testid=\"radio-RHODA-action-upgrade\"\n          label={textContent.upgradeClusterSelectLabel}\n          onChange={() => handleStrategyChange('Upgrade')}\n          isChecked={upgradeStrategy === 'Upgrade'}\n          body={upgradeBody}\n        />\n      </StackItem>\n      <StackItem>\n        <Radio\n          id=\"create-cluster\"\n          name=\"create-cluster\"\n          data-testid=\"radio-RHODA-action-create\"\n          label={textContent.createClusterLabel}\n          onChange={() => handleStrategyChange('Create')}\n          isChecked={upgradeStrategy === 'Create'}\n        />\n      </StackItem>\n    </Stack>\n  );\n};\n\nconst CreateClusterContent = () => {\n  return (\n    <TextContent>\n      <Text>{textContent.createClusterContent}</Text>\n    </TextContent>\n  );\n};\n\nconst ClusterModalContent = ({\n  mode,\n  clusters,\n  handleSelectCluster,\n  selectedCluster,\n  upgradeStrategy,\n  handleStrategyChange,\n}) => {\n  if (\n    mode === RHODAClusterAddonMode.Detecting ||\n    mode === RHODAClusterAddonMode.Installing\n  ) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (mode === RHODAClusterAddonMode.Install) {\n    return (\n      <InstallClusterModalContent\n        selectedCluster={selectedCluster}\n        handleSelectCluster={handleSelectCluster}\n        clusters={clusters}\n      />\n    );\n  }\n\n  if (mode === RHODAClusterAddonMode.Upgrade) {\n    return (\n      <UpgradeClusterModalContent\n        selectedCluster={selectedCluster}\n        handleSelectCluster={handleSelectCluster}\n        clusters={clusters}\n        upgradeStrategy={upgradeStrategy}\n        handleStrategyChange={handleStrategyChange}\n      />\n    );\n  }\n\n  if (mode === RHODAClusterAddonMode.Create) {\n    return <CreateClusterContent />;\n  }\n\n  return null;\n};\n\nfunction findValidClusterWithNodes(cluster) {\n  const hasWorkerNodes = !!cluster.metrics?.find((metric) => {\n    return metric && metric.nodes && metric.nodes.compute >= 2;\n  });\n  return hasWorkerNodes;\n}\n\nasync function fetchAddonInquirues(cluster) {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const url = window.insights.chrome.isProd()\n    ? `https://api.openshift.com/api/clusters_mgmt/v1/clusters/${cluster.cluster_id}/addon_inquiries/${RHODA_ADDON_ID}`\n    : `https://api.stage.openshift.com/api/clusters_mgmt/v1/clusters/${cluster.cluster_id}/addon_inquiries/${RHODA_ADDON_ID}`;\n  const getCluster = fetch(url, {\n    method: 'get',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((d) => d.json());\n  return getCluster.then((data) => ({\n    clusterId: cluster.cluster_id,\n    ...data,\n  }));\n}\n\nfunction getEligbleRHODAClusters({ value: { clusterId, ...items } }) {\n  const hasAddon = items?.requirements?.every(({ enabled }) => enabled);\n  const canInstallAddon = items?.requirements?.every(\n    ({ status: { fulfilled } }) => fulfilled\n  );\n  const minimumClusterVersion = items?.requirements[0]?.data['version.raw_id']\n    ?.split('=')[1]\n    .trim();\n  return { clusterId, hasAddon, canInstallAddon, minimumClusterVersion };\n}\n\nasync function loadClusters() {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const search = `status IN ('Active', 'Reserved')`;\n  const url = window.insights.chrome.isProd()\n    ? `https://api.openshift.com/api/accounts_mgmt/v1/subscriptions?search=${search}&fetchMetrics=true`\n    : `https://api.stage.openshift.com/api/accounts_mgmt/v1/subscriptions?search=${search}&fetchMetrics=true`;\n  const clusters = (\n    await fetch(url, {\n      method: 'get',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(function (d) {\n      return d.json();\n    })\n  ).items;\n  const clusterswithNodes = clusters.filter((cluster) =>\n    findValidClusterWithNodes(cluster)\n  );\n  const notAROClusters = clusterswithNodes.filter(\n    (cluster) => cluster.plan?.type !== 'ARO'\n  );\n  const clusterAddonInquirues = await Promise.allSettled(\n    notAROClusters.map(fetchAddonInquirues)\n  );\n  const clustersAvailability = clusterAddonInquirues\n    .filter(\n      ({ status, value: { kind } }) =>\n        status === 'fulfilled' && kind !== 'Error'\n    )\n    .reduce((acc, value) => {\n      const result = getEligbleRHODAClusters(value);\n      return {\n        ...acc,\n        [result.clusterId]: result,\n      };\n    }, {});\n  const installableClusters = clusterswithNodes.filter((cluster) => {\n    if (cluster.plan?.type === 'ARO') return true;\n    if (clustersAvailability[cluster.cluster_id] === undefined) return false;\n    const isVersionCorrect = cluster.metrics?.every(({ openshift_version }) =>\n      semver.gt(\n        semver.valid(semver.coerce(openshift_version)),\n        semver.valid(\n          semver.coerce(\n            clustersAvailability[cluster.cluster_id]?.minimumClusterVersion\n          )\n        )\n      )\n    );\n    return (\n      clustersAvailability[cluster.cluster_id]?.canInstallAddon &&\n      isVersionCorrect\n    );\n  });\n  return {\n    installableClusters,\n    clusters,\n  };\n}\n\nconst HomePage = () => {\n  const dispatch = useDispatch();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCluster, setSelectedCluster] = useState();\n  const [upgradeStrategy, setUpgradeStrategy] = useState('Upgrade');\n  const [{ mode, clusters }, setClustersState] = useState({\n    clusters: [],\n    mode: RHODAClusterAddonMode.Detecting,\n  });\n  const { analytics } = useChrome();\n\n  const modalActions = (mode) => {\n    const isAROClusterSelected =\n      selectedCluster && selectedCluster.plan?.type === 'ARO';\n    if (\n      mode === RHODAClusterAddonMode.Detecting ||\n      mode === RHODAClusterAddonMode.Installing\n    ) {\n      return [];\n    }\n    if (mode === RHODAClusterAddonMode.Install) {\n      return [\n        <Button\n          isDisabled={isAROClusterSelected}\n          variant=\"primary\"\n          key=\"install\"\n          onClick={() => {\n            installAddon();\n          }}\n          data-testid=\"install-RHODA-button\"\n        >\n          {textContent.installClusterAction}\n        </Button>,\n        <Button\n          component=\"a\"\n          href={CREATE_CLUSTER_HREF}\n          variant=\"secondary\"\n          key=\"install\"\n        >\n          {textContent.createClusterAction}\n        </Button>,\n        <Button\n          onClick={() => setIsModalOpen(false)}\n          key=\"cancel\"\n          variant=\"link\"\n          data-testid=\"install-RHODA-cancel\"\n        >\n          {textContent.cancelClusterAction}\n        </Button>,\n      ];\n    }\n    if (mode === RHODAClusterAddonMode.Upgrade) {\n      return [\n        <Button\n          variant=\"primary\"\n          key=\"install\"\n          component=\"a\"\n          data-testid=\"upgrade-RHODA-button\"\n          href={\n            upgradeStrategy === 'Create'\n              ? CREATE_CLUSTER_HREF\n              : UPGRADE_CLUSTER_HREF.replace(\n                  '{subscriptionID}',\n                  selectedCluster?.id || ''\n                )\n          }\n        >\n          {upgradeStrategy === 'Create'\n            ? textContent.createClusterAction\n            : textContent.upgradeAction}\n        </Button>,\n        <Button\n          onClick={() => setIsModalOpen(false)}\n          key=\"cancel\"\n          variant=\"link\"\n          data-testid=\"install-RHODA-cancel\"\n        >\n          {textContent.cancelClusterAction}\n        </Button>,\n      ];\n    }\n    if (mode === RHODAClusterAddonMode.Create) {\n      return [\n        <Button\n          component=\"a\"\n          href={CREATE_CLUSTER_HREF}\n          variant=\"primary\"\n          key=\"install\"\n        >\n          {textContent.createClusterAction}\n        </Button>,\n        <Button\n          onClick={() => setIsModalOpen(false)}\n          key=\"cancel\"\n          variant=\"link\"\n          data-testid=\"install-RHODA-cancel\"\n        >\n          {textContent.cancelClusterAction}\n        </Button>,\n      ];\n    }\n  };\n\n  const clusterModalDescriptions = {\n    [RHODAClusterAddonMode.Install]: textContent.installClusterDescription,\n    [RHODAClusterAddonMode.Upgrade]: textContent.upgradeClusterDescription,\n    [RHODAClusterAddonMode.Create]: textContent.createClusterDescription,\n  };\n\n  const clusterModalTitles = {\n    [RHODAClusterAddonMode.Detecting]: textContent.detectingClustersTitle,\n    [RHODAClusterAddonMode.Installing]: textContent.installingClustersTitle,\n    [RHODAClusterAddonMode.Install]: textContent.installClusterTitle,\n    [RHODAClusterAddonMode.Upgrade]: textContent.installClusterTitle,\n    [RHODAClusterAddonMode.Create]: textContent.createClusterTitle,\n  };\n\n  const getData = useCallback(async () => {\n    const { clusters, installableClusters } = await loadClusters();\n    if (installableClusters.length > 0) {\n      setClustersState({\n        mode: RHODAClusterAddonMode.Install,\n        clusters: installableClusters,\n      });\n      //Select the first cluster by default\n      setSelectedCluster(installableClusters[0]);\n    } else {\n      setClustersState({\n        mode: RHODAClusterAddonMode.Create,\n        clusters,\n      });\n    }\n  }, [loadClusters]);\n\n  const parsePayload = (res) => {\n    setIsModalOpen(false);\n    setClustersState({ mode: RHODAClusterAddonMode.Detecting, clusters: [] });\n    if (res && res.state === 'ready') {\n      dispatch(\n        addNotification({\n          variant: 'success',\n          title: 'RHODA add-on successfully installed',\n          description: (\n            <>\n              <p>\n                The add-on has been installed on {selectedCluster.display_name}.\n                To view the cluster or to interact with it go to the OpenShift\n                Cluster Manager (OCM).\n              </p>\n              <br />\n              <Button\n                variant=\"link\"\n                component=\"a\"\n                href={selectedCluster.console_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                icon={<ExternalLinkAltIcon />}\n                iconPosition=\"right\"\n                isInline\n              >\n                Go to the OpenShift Cluster Manager console\n              </Button>\n            </>\n          ),\n        })\n      );\n    }\n\n    if (res && res.state === 'installing') {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: 'Add-on installation in progress',\n          description: (\n            <>\n              <p>\n                The Red Hat OpenShift Database Access add-on is being installed\n                on the cluster you selected. To monitor the installation\n                progress click on the link below.\n              </p>\n              <br />\n              <Button\n                variant=\"link\"\n                component=\"a\"\n                href={INSTALL_ADDON_HREF.replace(\n                  '{subscriptionID}',\n                  selectedCluster?.id || ''\n                )}\n                rel=\"noopener noreferrer\"\n                icon={<ExternalLinkAltIcon />}\n                iconPosition=\"right\"\n                isInline\n              >\n                View progress\n              </Button>\n            </>\n          ),\n        })\n      );\n    }\n\n    if (res && res.kind === 'Error') {\n      dispatch(\n        addNotification({\n          variant: 'danger',\n          title: 'RHODA add-on successfully failed',\n          description:\n            res && res.reason\n              ? res.reason\n              : `The add-on could not be installed on ${selectedCluster.display_name}.`,\n        })\n      );\n    }\n  };\n\n  const installAddon = async () => {\n    await window.insights.chrome.auth.getUser();\n    const token = await window.insights.chrome.auth.getToken();\n    const url = window.insights.chrome.isProd()\n      ? `https://api.openshift.com/api/clusters_mgmt/v1/clusters/${selectedCluster.cluster_id}/addons`\n      : `https://api.stage.openshift.com/api/clusters_mgmt/v1/clusters/${selectedCluster.cluster_id}/addons`;\n    const payload = {\n      addon: { id: RHODA_ADDON_ID },\n      billing: { billing_model: 'standard' },\n    };\n    setClustersState({\n      mode: RHODAClusterAddonMode.Installing,\n    });\n    await fetch(url, {\n      method: 'post',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify(payload),\n    })\n      .then((response) => response.json())\n      .then((data) => parsePayload(data))\n      .catch((err) => {\n        setIsModalOpen(false);\n        setClustersState({\n          mode: RHODAClusterAddonMode.Detecting,\n          clusters: [],\n        });\n        dispatch(\n          addNotification({\n            variant: 'danger',\n            title: 'RHODA add-on successfully failed',\n            description:\n              err && err.reason\n                ? err.reason\n                : `The add-on could not be installed on ${selectedCluster.display_name}. Please try again later.`,\n          })\n        );\n      });\n  };\n\n  const handleInstallModalOpen = () => {\n    // eslint-disable-next-line\n    analytics.track('rhoda-install-it-on-cluster-button-click');\n    getData();\n    setIsModalOpen(true);\n  };\n\n  const handleSelectCluster = (cluster) => {\n    setSelectedCluster(cluster);\n  };\n\n  useEffect(() => {\n    dispatch(clearNotifications());\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Modal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        variant=\"medium\"\n        data-testid=\"database-access-modal\"\n        actions={modalActions(mode)}\n        title={clusterModalTitles[mode]}\n        description={\n          mode !== RHODAClusterAddonMode.Detecting ||\n          mode !== RHODAClusterAddonMode.Installing ? (\n            <Title headingLevel=\"h2\" size=\"md\">\n              {clusterModalDescriptions[mode]}\n            </Title>\n          ) : undefined\n        }\n      >\n        <ClusterModalContent\n          upgradeStrategy={upgradeStrategy}\n          handleSelectCluster={handleSelectCluster}\n          selectedCluster={selectedCluster}\n          mode={mode}\n          clusters={clusters}\n          handleStrategyChange={setUpgradeStrategy}\n        />\n      </Modal>\n      <PageHeader className=\"dbaas-home-page__header pf-u-p-2xl\">\n        <Grid>\n          <GridItem sm={12} md={6}>\n            <Title size=\"2xl\" headingLevel=\"h1\">\n              Get started with Red Hat OpenShift Database Access\n            </Title>\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Text size=\"lg\" className=\"dbaas-home-page__subtitle\">\n                    Add-on service for managed OpenShift\n                  </Text>\n                  <Text>\n                    OpenShift Database Access helps accelerate development for\n                    applications using cloud-hosted database services like\n                    MongoDB Atlas, Crunchy Bridge, CockroachDB or Amazon’s\n                    Aurora and Relational Database Service (RDS) with support\n                    for popular database engines, including: MySQL, PostgreSQL,\n                    SQL Server, MariaDB, and Oracle.\n                  </Text>\n                  <Text>\n                    To learn more access the &nbsp;\n                    <Button\n                      onClick={() => {\n                        analytics.track('rhoda-get-started-click');\n                      }}\n                      iconPosition=\"right\"\n                      icon={<ExternalLinkAltIcon />}\n                      isInline\n                      variant=\"link\"\n                      component=\"a\"\n                      target=\"_blank\"\n                      href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_database_access/1/html-single/quick_start_guide/index\"\n                    >\n                      quick start guide\n                    </Button>\n                  </Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <Flex>\n                  <Button\n                    data-testid=\"hero-buttonInstall\"\n                    ouiaId=\"button-rhoda-install\"\n                    onClick={handleInstallModalOpen}\n                  >\n                    {textContent.installButton}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      analytics.track('rhoda-try-it-on-sandbox-button-click');\n                    }}\n                    iconPosition=\"right\"\n                    icon={<ExternalLinkAltIcon />}\n                    component=\"a\"\n                    target=\"_blank\"\n                    variant=\"secondary\"\n                    href=\"https://developers.redhat.com/developer-sandbox\"\n                  >\n                    Try it in the Developer Sandbox\n                  </Button>\n                </Flex>\n              </StackItem>\n            </Stack>\n          </GridItem>\n        </Grid>\n      </PageHeader>\n      <Main className=\"pf-u-pt-xl pf-u-pb-xl pf-u-pl-2xl pf-u-pr-2xl\">\n        <Title className=\"pf-u-mb-lg\" headingLevel=\"h2\" size=\"xl\">\n          Demo of OpenShift Database Access\n        </Title>\n        <Stack hasGutter>\n          <StackItem>\n            <Grid hasGutter>\n              <GridItem md={6} sm={12}>\n                <Stack hasGutter>\n                  <StackItem>\n                    <TextContent>\n                      <Text>\n                        <b>For database admins:</b> in this video you’ll learn\n                        how to set up a cloud database service connection on\n                        your OpenShift cluster for self-service consumption by\n                        application developers.\n                      </Text>\n                    </TextContent>\n                  </StackItem>\n                  <StackItem>\n                    <Button\n                      onClick={() => {\n                        analytics.track('rhoda-video-1-click');\n                      }}\n                      iconPosition=\"right\"\n                      icon={<ExternalLinkAltIcon />}\n                      target=\"_blank\"\n                      component=\"a\"\n                      variant=\"secondary\"\n                      href=\"https://youtu.be/vDrh3SnciL0\"\n                    >\n                      View the demo\n                    </Button>\n                  </StackItem>\n                </Stack>\n              </GridItem>\n              <GridItem md={6} sm={12}>\n                <iframe\n                  style={{ width: '100%', height: '315px' }}\n                  width=\"560\"\n                  height=\"315\"\n                  src=\"https://www.youtube.com/embed/vDrh3SnciL0\"\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </GridItem>\n            </Grid>\n          </StackItem>\n          <StackItem>\n            <Grid hasGutter>\n              <GridItem md={6} sm={12}>\n                <Stack hasGutter>\n                  <StackItem>\n                    <TextContent>\n                      <Text>\n                        <b>For application developers:</b> in this video, you’ll\n                        learn how to quickly and easily connect your application\n                        to a cloud database service on your OpenShift cluster.\n                      </Text>\n                    </TextContent>\n                  </StackItem>\n                  <StackItem>\n                    <Button\n                      onClick={() => {\n                        analytics.track('rhoda-video-2-click');\n                      }}\n                      iconPosition=\"right\"\n                      icon={<ExternalLinkAltIcon />}\n                      target=\"_blank\"\n                      component=\"a\"\n                      variant=\"secondary\"\n                      href=\"https://youtu.be/qWaAwhxwjWs\"\n                    >\n                      View the demo\n                    </Button>\n                  </StackItem>\n                </Stack>\n              </GridItem>\n              <GridItem md={6} sm={12}>\n                <iframe\n                  style={{ width: '100%', height: '315px' }}\n                  width=\"560\"\n                  height=\"315\"\n                  src=\"https://www.youtube.com/embed/qWaAwhxwjWs\"\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </GridItem>\n            </Grid>\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default HomePage;\n"],"names":["ClusterTypeAndNameMapping","ARO","OSD","MOA","RHODAClusterAddonMode","Detecting","Install","Upgrade","Create","CREATE_CLUSTER_HREF","document","baseURI","UPGRADE_CLUSTER_HREF","INSTALL_ADDON_HREF","RHODA_ADDON_ID","textContent","ClusterSelect","clusters","handleSelectCluster","selectedCluster","isDisabled","useState","isOpen","setIsOpen","getClusterTypeAndName","cluster","clusterType","undefined","plan","type","cloud_provider_id","display_name","Select","maxHeight","onSelect","selections","toString","compareTo","selectOption","cluster_id","menuAppendTo","variant","onToggle","map","SelectOption","onClick","key","value","InstallClusterModalContent","props","Stack","hasGutter","StackItem","TextContent","Text","Split","style","alignItems","SplitItem","className","component","marginLeft","Popover","headerContent","bodyContent","List","ListItem","e","preventDefault","noVerticalAlign","Alert","isInline","title","Button","href","target","rel","icon","iconPosition","UpgradeClusterModalContent","handleStrategyChange","upgradeStrategy","upgradeBody","Radio","id","name","label","onChange","isChecked","body","CreateClusterContent","ClusterModalContent","mode","Installing","Bullseye","Spinner","size","findValidClusterWithNodes","metrics","find","metric","nodes","compute","fetchAddonInquirues","window","insights","chrome","auth","getUser","getToken","token","url","isProd","getCluster","fetch","method","headers","Authorization","then","d","json","data","clusterId","getEligbleRHODAClusters","items","hasAddon","requirements","every","enabled","canInstallAddon","status","fulfilled","minimumClusterVersion","split","trim","loadClusters","search","clusterswithNodes","filter","notAROClusters","Promise","allSettled","clusterAddonInquirues","clustersAvailability","kind","reduce","acc","result","installableClusters","isVersionCorrect","openshift_version","semver","dispatch","useDispatch","isModalOpen","setIsModalOpen","setSelectedCluster","setUpgradeStrategy","setClustersState","analytics","useChrome","clusterModalDescriptions","clusterModalTitles","getData","useCallback","length","installAddon","payload","addon","billing","billing_model","Accept","JSON","stringify","response","res","state","addNotification","description","console_url","replace","reason","err","useEffect","clearNotifications","Modal","onClose","actions","isAROClusterSelected","modalActions","Title","headingLevel","PageHeader","Grid","GridItem","sm","md","track","Flex","ouiaId","Main","width","height","src","frameBorder","allow","allowFullScreen"],"sourceRoot":""}