{"version":3,"file":"js/exposed-./RootApp.a0e6e545876c6ff3e98b.js","mappings":"+HAIIA,E,8EAEG,SAASC,IACd,IAAKD,EAAU,SAAAE,EAAAC,UAAAC,OADOC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAE9BP,GAAWQ,EAAAA,EAAAA,IAAY,CAAC,EAAG,CACzBC,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAAWC,OAClEP,GAEP,CACA,OAAOL,CACT,C,+DCTMa,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,6BAA8D,IAE1DC,GAAWD,EAAAA,EAAAA,OAAK,kBACpB,4BAAuE,IAEnEE,GAAUF,EAAAA,EAAAA,OAAK,kBACnB,6BAAuE,IAyBzE,QAtBe,WAAH,OACVG,IAAAA,cAACC,EAAAA,SAAQ,CACPC,SACEF,IAAAA,cAACG,EAAAA,SAAQ,KACPH,IAAAA,cAACI,EAAAA,QAAO,QAIZJ,IAAAA,cAACK,EAAAA,OAAM,KACLL,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,oBACVP,IAAAA,cAACD,EAAO,OAEVC,IAAAA,cAACM,EAAAA,MAAK,CAACC,KAAK,KACVP,IAAAA,cAACJ,EAAQ,OAEXI,IAAAA,cAACM,EAAAA,MAAK,KACJN,IAAAA,cAACF,EAAQ,QAGJ,ECxBb,IAAMU,EAAM,WACV,IAAMC,GAAUC,EAAAA,EAAAA,cACVC,GAASC,EAAAA,EAAAA,KAkBf,OAhBAC,EAAAA,EAAAA,YAAU,YACStB,EAAAA,EAAAA,MACRuB,SAAS,CAAEC,cAAeC,EAAAA,KACnCL,EAAO3B,OACP,IAAMiC,EAAaC,SAASP,OAAOQ,GAAG,kBAAkB,SAACC,GAAU,IAAAC,EACtCC,EAAvBF,SAAe,QAAVC,EAALD,EAAOG,gBAAQ,IAAAF,GAAfA,EAAiBG,MACnBf,EAAQgB,KAAKL,SAAe,QAAVE,EAALF,EAAOG,gBAAQ,IAAAD,OAAV,EAALA,EAAiBE,KAElC,IAEA,OADAE,SAASC,MAAQ,2DACV,WACLV,GACF,CAEF,GAAG,IAGDjB,IAAAA,cAAC4B,EAAAA,SAAQ,KACP5B,IAAAA,cAAC6B,EAAAA,GAAmB,MACpB7B,IAAAA,cAAC8B,EAAM,MAGb,EAEAtB,EAAIuB,UAAY,CACdC,SAAUC,IAAAA,OAAiBC,YAG7B,U,cCpBA,QAfiB,WACf,IAAMvB,GAASC,EAAAA,EAAAA,KACToB,GAAWG,EAAAA,EAAAA,UACf,kBAAMC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,SAAU5B,EAAO6B,SAAW,EAAI,EAAE,GACpE,IAEF,OACExC,IAAAA,cAACyC,EAAAA,GAAQ,CAACC,MAAO1D,IAAO2D,YACtB3C,IAAAA,cAAC4C,EAAAA,cAAM,CAACZ,SAAUA,GAChBhC,IAAAA,cAACQ,EAAG,CAACwB,SAAUA,KAIvB,C","sources":["webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = getRegistry({}, [\n      promiseMiddleware,\n      notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n      ...middleware,\n    ]);\n  }\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\n// eslint-disable-next-line prettier/prettier\nconst HomePage = lazy(() =>\n  import(/* webpackChunkName: \"HomePage\" */ './Routes/HomePage')\n);\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst TASPage = lazy(() =>\n  import(/* webpackChunkName: \"TASPage\" */ './Routes/ArtifactSignerPage')\n);\n\nconst Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/artifact-signer\">\n        <TASPage />\n      </Route>\n      <Route path=\"/\">\n        <HomePage />\n      </Route>\n      <Route>\n        <OopsPage />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n\nexport default Routes;\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport Routes from './Routes';\nimport './App.scss';\n\nconst App = () => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    chrome.init();\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event?.domEvent?.href) {\n        history.push(event?.domEvent?.href);\n      }\n    });\n    document.title = 'Trusted Content | Red Hat OpenShift Application Services';\n    return () => {\n      unregister();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nApp.propTypes = {\n  basename: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import React, { useMemo } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AppEntry = () => {\n  const chrome = useChrome();\n  const basename = useMemo(\n    () => getBaseName(window.location.pathname, chrome.isBeta() ? 3 : 2),\n    []\n  );\n  return (\n    <Provider store={init().getStore()}>\n      <Router basename={basename}>\n        <App basename={basename} />\n      </Router>\n    </Provider>\n  );\n};\n\nexport default AppEntry;\n"],"names":["registry","init","_len","arguments","length","middleware","Array","_key","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","concat","HomePage","lazy","OopsPage","TASPage","React","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","App","history","useHistory","chrome","useChrome","useEffect","register","notifications","notificationsReducer","unregister","insights","on","event","_event$domEvent","_event$domEvent2","domEvent","href","push","document","title","Fragment","NotificationsPortal","Routes","propTypes","basename","PropTypes","isRequired","useMemo","getBaseName","window","location","pathname","isBeta","Provider","store","getStore","Router"],"sourceRoot":""}