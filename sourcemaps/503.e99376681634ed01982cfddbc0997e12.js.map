{"version":3,"file":"js/503.7cc16c1699a15e0289ed.js","mappings":"+HAIIA,E,8EAEG,SAASC,IACd,GAAID,EAAU,4BADQE,EACR,yBADQA,EACR,gBACZF,GAAWG,EAAAA,EAAAA,IAAY,GAAD,CACpBC,KACAC,EAAAA,EAAAA,IAAwB,CAAEC,oBAAqB,CAAC,SAAU,YAFtC,OAGjBJ,IAGP,OAAOF,E,+DCTHO,GAAWC,EAAAA,EAAAA,OAAK,kBACpB,2EAEIC,GAAWD,EAAAA,EAAAA,OAAK,kBACpB,2EAqBF,QAnBe,kBACb,kBAAC,EAAAE,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,KAAK,KACV,kBAACT,EAAD,OAEF,kBAAC,EAAAQ,MAAD,KACE,kBAACN,EAAD,UCbR,IAAMQ,EAAM,WACV,IAAMC,GAAUC,EAAAA,EAAAA,cACVC,GAASC,EAAAA,EAAAA,KAgBf,OAdAC,EAAAA,EAAAA,YAAU,YACSnB,EAAAA,EAAAA,MACRoB,SAAS,CAAEC,cAAeC,EAAAA,KACnCL,EAAOnB,OACP,IAAMyB,EAAaC,SAASP,OAAOQ,GAAG,kBAAkB,SAACC,GAAU,MACtC,EAAvBA,MAAAA,GAAJ,UAAIA,EAAOC,gBAAX,OAAI,EAAiBC,MACnBb,EAAQc,KAAKH,MAAAA,GAAb,UAAaA,EAAOC,gBAApB,aAAa,EAAiBC,SAGlC,OAAO,WACLL,OAED,IAGD,kBAAC,EAAAO,SAAD,KACE,kBAAC,KAAD,MACA,kBAAC,EAAD,QAKNhB,EAAIiB,UAAY,CACdC,SAAUC,IAAAA,OAAAA,YAGZ,U,IClCMD,GAAWE,E,QAAAA,IAAYC,OAAOC,SAASC,UAS7C,QARiB,kBACf,kBAAC,EAAAC,SAAD,CAAUC,MAAOzC,IAAO0C,YACtB,kBAAC,gBAAD,CAAQR,SAAUA,GAChB,kBAAC,EAAD,CAAKA,SAAUA","sources":["webpack:///./src/store/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js"],"sourcesContent":["import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (registry) {\n    registry = getRegistry({}, [\n      promiseMiddleware,\n      notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n      ...middleware,\n    ]);\n  }\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst HomePage = lazy(() =>\n  import(/* webpackChunkName: \"HomePage\" */ './Routes/HomePage')\n);\nconst OopsPage = lazy(() =>\n  import(/* webpackChunkName: \"OopsPage\" */ './Routes/OopsPage/OopsPage')\n);\nconst Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/\">\n        <HomePage />\n      </Route>\n      <Route>\n        <OopsPage />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n\nexport default Routes;\n","import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport Routes from './Routes';\nimport './App.scss';\n\nconst App = () => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    chrome.init();\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      if (event?.domEvent?.href) {\n        history.push(event?.domEvent?.href);\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </Fragment>\n  );\n};\n\nApp.propTypes = {\n  basename: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst basename = getBaseName(window.location.pathname);\nconst AppEntry = () => (\n  <Provider store={init().getStore()}>\n    <Router basename={basename}>\n      <App basename={basename} />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n"],"names":["registry","init","middleware","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","HomePage","lazy","OopsPage","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","App","history","useHistory","chrome","useChrome","useEffect","register","notifications","notificationsReducer","unregister","insights","on","event","domEvent","href","push","Fragment","propTypes","basename","PropTypes","getBaseName","window","location","pathname","Provider","store","getStore"],"sourceRoot":""}